/*
 * Copyright (c) 2018 AppDynamics, Inc., and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @file appd_iot_def.h
 * @brief This file contains the data structure definitions and utility functions used by the SDK
 */


#ifndef _APPD_IOT_DEF_H_
#define _APPD_IOT_DEF_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <string.h>

/**
 * @brief Error Code Enums for SDK log
 */
typedef enum
{
  /*! Success */
  APPD_IOT_SUCCESS,
  /*! Invalid Input Passed as Param */
  APPD_IOT_ERR_INVALID_INPUT,
  /*! Max Limit Reached */
  APPD_IOT_ERR_MAX_LIMIT,
  /*! Network Request Error (Could be Client Error or Server Error) */
  APPD_IOT_ERR_NETWORK_ERROR,
  /*! Network Request Rejected */
  APPD_IOT_ERR_NETWORK_REJECT,
  /*! Host Not Reachable */
  APPD_IOT_ERR_NETWORK_UNREACHABLE,
  /*! No Network Connectivity */
  APPD_IOT_ERR_NETWORK_NOT_AVAILABLE,
  /*! Encountered a NULL ptr */
  APPD_IOT_ERR_NULL_PTR,
  /*! Internal Application Error */
  APPD_IOT_ERR_INTERNAL,
  /*! Not Supported Functionality */
  APPD_IOT_ERR_NOT_SUPPORTED,
  /*! SDK is not in Enabled State */
  APPD_IOT_ERR_SDK_NOT_ENABLED,
  /*! MAX Error Codes */
  APPD_IOT_MAX_ERROR_CODES
} appd_iot_error_code_t;


/**
 * @brief Enums for SDK State
 */
typedef enum
{
  /*! SDK is Uninitialized */
  APPD_IOT_SDK_UNINITIALIZED,
  /*! SDK is Enabled */
  APPD_IOT_SDK_ENABLED,
  /*! SDK is Disabled by Controller by manually turning off Instrumentation */
  APPD_IOT_SDK_DISABLED_KILL_SWITCH,
  /*! SDK is Disabled by Controller due to License Expiry */
  APPD_IOT_SDK_DISABLED_LICENSE_EXPIRED,
  /*! SDK is Disabled by Controller due to Data Limit Exceeded */
  APPD_IOT_SDK_DISABLED_DATA_LIMIT_EXCEEDED,
  /*! MAX SDK States */
  APPD_IOT_MAX_SDK_STATES
} appd_iot_sdk_state_t;

/**
 * @brief Severity of the errors occured in the application
 */
typedef enum
{
  /*! Errors that do not affect application */
  APPD_IOT_ERR_SEVERITY_ALERT,
  /*! Errors that affect application functionality */
  APPD_IOT_ERR_SEVERITY_CRITICAL,
  /*! Errors that result in application hang/resets */
  APPD_IOT_ERR_SEVERITY_FATAL,
  /*! Max Number of Severity Levels */
  APPD_IOT_ERR_MAX_SEVERITY_LEVELS
} appd_iot_error_severity_t;


/**
 * @brief Log Level Enums returned for all API calls
 */
typedef enum
{
  /*! No Logs generated by SDK */
  APPD_IOT_LOG_OFF,
  /*! Error Messages only, this is default */
  APPD_IOT_LOG_ERROR,
  /*! Warning Messages or higher */
  APPD_IOT_LOG_WARN,
  /*! Information, may be useful to developer */
  APPD_IOT_LOG_INFO,
  /*! Debug, useful for support personnel and developers */
  APPD_IOT_LOG_DEBUG,
  /*! Verbose, useful for support personnel */
  APPD_IOT_LOG_VERBOSE,
  /*! All messages */
  APPD_IOT_LOG_ALL,
  /*! Max Log Levels */
  APPD_IOT_MAX_LOG_LEVELS
} appd_iot_log_level_t;


/**
 * @brief Log Write Callback implements the functionality to process log messages <br>
 * The callback implementation reads log message and writes it to disk or prints to std terminal
 * @param logmsg contains log message. Newline is not appended to the log message. <br>
 * Each logmsg is appended with a tag "E/APPDYNAMICS:". <br>
 * First Letter in the tag indicates log level as given in appd_iot_log_level_t. <br>
 * logmsg not to be freed in the log write callback. It is freed by the caller of log write cb.
 * @param logmsg_len contains the length of log message
 */
typedef void (*appd_iot_log_write_cb_t)(const char* logmsg, size_t logmsg_len);


/**
 * @brief This Callback function gets triggered whenever sdk state changes. SDK states are given in
 * appd_iot_sdk_state_t. <br>
 * SDK inital state is set to UNINITIALIZED. SDK state is set to ENABLED after init function
 * (appd_iot_init_sdk(void)) is called. SDK state is set to DISABLED when APPDYNAMICS Collector indicates IoT
 * application on the Controller is disabled due to license expiry, kill switch or data limit exceeded. <br>
 * Users should periodically check on application status with APPDYNAMICS Collector and re-enable SDK
 * using the API appd_iot_check_app_status(void).
 * @param sdk_state indicates the new state of SDK.
 */
typedef void (*appd_iot_sdk_state_change_cb_t)(appd_iot_sdk_state_t sdk_state);

/**
 * @brief AppDynamics SDK Configuration <br>
 * Mandatory: All Fields
 */
typedef struct
{
  /*! Application License Key */
  const char* appkey;
  /*! URL where the events will be sent to. If set to NULL, default URL will be used */
  const char* eum_collector_url;
  /*! Set Log Level. To Disable logging, set it to APPD_IOT_LOG_OFF */
  appd_iot_log_level_t log_level;
  /*! Callback function to write log message. If set to NULL and logging is enabled,
   *  log messages will be written to stderr. */
  appd_iot_log_write_cb_t log_write_cb;
  /*! Callback function triggered whenever sdk state changes. SDK states are given in appd_iot_sdk_state_t */
  appd_iot_sdk_state_change_cb_t sdk_state_change_cb;
} appd_iot_sdk_config_t;


/**
 * @brief AppDynamics Device Information <br>
 * Mandatory: Device Type and Device ID Fields
 */
typedef struct
{
  /*! Device Name in Human Readable Format */
  const char* device_name;
  /*! Device Type */
  const char* device_type;
  /*! Device ID to uniquely identify the device */
  const char* device_id;
  /*! Hardware Version */
  const char* hw_version;
  /*! Firmware Version */
  const char* fw_version;
  /*! Software Version */
  const char* sw_version;
  /*! OS Version */
  const char* os_version;
} appd_iot_device_config_t;


/**
 * @brief AppDynamics Data Types
 */
typedef enum
{
  /*! Integer Value */
  APPD_IOT_INTEGER,
  /*! Double Value */
  APPD_IOT_DOUBLE,
  /*! String Value */
  APPD_IOT_STRING,
  /*! Boolean Value */
  APPD_IOT_BOOLEAN,
  /*! DateTime Value */
  APPD_IOT_DATETIME
} appd_iot_data_types_t;


/**
 * @brief AppDynamics Associative Array Data Structure <br>
 * Underlying implementation is a Sequential List of <key, value> pairs
 */
typedef struct
{
  const char* key;
  union
  {
    const char* strval;
    bool boolval;
    int64_t intval;
    double doubleval;
    int64_t datetimeval;
  };
  appd_iot_data_types_t value_type;
} appd_iot_data_t;


/**
 * @brief AppDynamics Custom Event <br>
 * Mandatory: type, summary and timestamp_ms Fields
 */
typedef struct
{
  /*! Type of the event */
  const char* type;
  /*! Summary of the event */
  const char* summary;
  /*! Epoch Timestamp in milliseconds */
  int64_t timestamp_ms;
  /*! Duration of the event in milliseconds */
  int duration_ms;
  /*! Count of additional data to be sent as part of custom event */
  int data_count;
  /*! Additional data to be sent as part of custom event */
  appd_iot_data_t* data;
} appd_iot_custom_event_t;


/**
 * @brief AppDynamics Network Request Event <br>
 * Mandatory: url and timestamp_ms Fields
 */
typedef struct
{
  /*! Network Request URL */
  const char* url;
  /*! Error description if failed to fetch URL */
  const char* error;
  /*! Duration of the event in milliseconds */
  int duration_ms;
  /*! Length of HTTP Request Data */
  int req_content_length;
  /*! Length of HTTP Response Data */
  int resp_content_length;
  /*! HTTP Response Code */
  int resp_code;
  /*! Number of Response Headers as <key,value> pairs */
  int resp_headers_count;
  /*! Response Headers as <key,value> pairs */
  appd_iot_data_t* resp_headers;
  /*! Epoch Timestamp in milliseconds */
  int64_t timestamp_ms;
  /*! Count of additional data to be sent as part of network request event */
  int data_count;
  /*! Additional data to be sent as part of network request event */
  appd_iot_data_t* data;
} appd_iot_network_request_event_t;


/**
 * @brief AppDynamics Stack Frame <br>
 * This structure captures a single element in the stack frame <br>
 * Each stack frame should have atlease one of symbol_name, package_name or file_name
 */
typedef struct
{
  /*! Function Name */
  const char* symbol_name;
  /*! Library Name */
  const char* package_name;
  /*! File Name - could be just name or full path of the file */
  const char* file_name;
  /*! Line number in the source file */
  int lineno;
  /*! Absolute address of the instruction */
  uint64_t absolute_addr;
  /*! Offset of the instruction from start of the image */
  int image_offset;
  /*! Offset of the instruction from start of the symbol */
  int symbol_offset;
} appd_iot_stack_frame_t;


/**
 * @brief AppDynamics Stack Trace <br>
 * This structure captures the strack trace
 */
typedef struct
{
  /*! Thread Name. If single thread it could be just "main" */
  const char* thread;
  /*! Stack Frame with list of functions starting with most recent call */
  appd_iot_stack_frame_t* stack_frame;
  /*! Number of function calls present in the stack frame */
  int stack_frame_count;
} appd_iot_stack_trace_t;


/**
 * @brief AppDynamics Error Event <br>
 * This structure can be used to send error or exception or a crash. <br>
 * Mandatory: name and timestamp_ms Fields
 */
typedef struct
{
  /*! Error Name - e.g., SIGSEGV, NullPtrException etc */
  const char* name;
  /*! Detailed Description of Error */
  const char* message;
  /*! Severity of error - alert, critical or fatal */
  appd_iot_error_severity_t severity;
  /*! Epoch Timestamp in milliseconds */
  int64_t timestamp_ms;
  /*! Duration of the event in milliseconds */
  int duration_ms;
  /*! Number of Stack Traces Present. Each stack trace will have a stack frame */
  int stack_trace_count;
  /*! Index of stack trace which resulted in error or exception */
  int error_stack_trace_index;
  /*! List of Stack Traces with each stack trace containing its own stack frame */
  appd_iot_stack_trace_t* stack_trace;
  /*! Count of additional data to be sent as part of error event */
  int data_count;
  /*! Additional data to be sent as part of error event */
  appd_iot_data_t* data;
} appd_iot_error_event_t;


/**
 * @brief AppDynamics HTTP Request Structure <br>
 * Mandatory: All Fields <br>
 * Data is provided in raw format. If data is sent in gzip format then add the http request header <br>
 * "Content-Encoding: gzip". It is recommended to gzip data for efficient use of resources.
 */
typedef struct
{
  /*! Request URL */
  const char* url;
  /*! Number of Request Headers as <key,value> pairs */
  int headers_count;
  /*! Request Headers as <key,value> pairs */
  appd_iot_data_t* headers;
  /*! Request Type - POST or GET */
  const char* type;
  /*! Request Payload */
  const char* data;
} appd_iot_http_req_t;


/**
 * @brief AppDynamics HTTP Response Structure <br>
 * Mandatory: One of the resp_code or error fields should be populated
 */
typedef struct
{
  /*! Response Code */
  int resp_code;
  /* Optional - Indicates time taken to execute the request */
  int duration_ms;
  /*! Number of Response Headers as <key,value> pairs */
  int headers_count;
  /*! Response Headers as <key,value> pairs */
  appd_iot_data_t* headers;
  /*! Response Content Length */
  size_t content_len;
  /*! Response Content */
  const char* content;
  /*! Placeholder for any additional data that user wants to keep track of */
  const void* user_data;
  /*! To indicate any error occured while executing the request. */
  appd_iot_error_code_t error;
} appd_iot_http_resp_t;


/**
 * @brief Http Request Send Callback implements the functionality to send HTTP Request <br>
 * The callback implementation reads in http_req parameters, executes http request and
 * populates http response params. Any server redirections (http status: 3xx) must be handled by
 * the http client library.
 * @param http_req contains request parameters. The caller allocates memory and caller will free it.
 * @return appd_iot_http_resp_t contains response parameters. Memory is allocated within <br>
 * callback function and can be freed as part of appd_iot_http_resp_done_cb_t callback function.
 */
typedef appd_iot_http_resp_t* (*appd_iot_http_req_send_cb_t)(const appd_iot_http_req_t* http_req);


/**
 * @brief Http Response Done Callback is triggered after http send callback returns <br>
 * and http response is processed by SDK.Any cleanup work can be part of this function <br>
 * which includes freeing the memory allocated to http_resp struct. <br>
 * This callback will be called even if send callback returns error code.
 * @param http_resp contains response parameters. This pointer is passed to free the memory <br>
 * it points to. http_resp also has user_data field which is populated in http send callback <br>
 * for internal purposes.
 */
typedef void (*appd_iot_http_resp_done_cb_t)(appd_iot_http_resp_t* http_resp);


/**
 * @brief AppDynamics HTTP Callback list <br>
 * Mandatory: http_req_send_cb and http_resp_done_cb fields
 */
typedef struct
{
  appd_iot_http_req_send_cb_t http_req_send_cb;
  appd_iot_http_resp_done_cb_t http_resp_done_cb;
} appd_iot_http_cb_t;


/*! Number of Server Correlation Headers
 */
#define APPD_IOT_NUM_SERVER_CORRELATION_HEADERS 2

/**
 * @brief Sets data field attributes for 64 bit integer value
 */
static inline void appd_iot_data_set_integer(appd_iot_data_t* data, const char* key, int64_t value)
{
  data->key = key;
  data->intval = value;
  data->value_type = APPD_IOT_INTEGER;
}

/**
 * @brief Sets data field attributes for double value
 */
static inline void appd_iot_data_set_double(appd_iot_data_t* data, const char* key, double value)
{
  data->key = key;
  data->doubleval = value;
  data->value_type = APPD_IOT_DOUBLE;
}

/**
 * @brief Sets data field attributes for datetime value
 */
static inline void appd_iot_data_set_datetime(appd_iot_data_t* data, const char* key, int64_t value)
{
  data->key = key;
  data->datetimeval = value;
  data->value_type = APPD_IOT_DATETIME;
}

/**
 * @brief Sets data field attributes for boolean value
 */
static inline void appd_iot_data_set_boolean(appd_iot_data_t* data, const char* key, bool value)
{
  data->key = key;
  data->boolval = value;
  data->value_type = APPD_IOT_BOOLEAN;
}

/**
 * @brief Sets data field attributes for string value
 */
static inline void appd_iot_data_set_string(appd_iot_data_t* data, const char* key, const char* value)
{
  data->key = key;
  data->strval = value;
  data->value_type = APPD_IOT_STRING;
}

/**
 * @brief Initializes memory block pointed by ptr to zero
 */
static inline void appd_iot_init_to_zero(void* ptr, size_t size)
{
  memset(ptr, 0, size);
}

/**
 * @brief Convert error code to string
 * @param error_code that is to be converted to string
 * @return string representation of the error code
 */
const char* appd_iot_error_code_to_str(appd_iot_error_code_t error_code) __APPD_IOT_API;

/**
 * @brief Convert sdk state to string
 * @param sdk_state that is to be converted to string
 * @return string representation of the sdk state
 */
const char* appd_iot_sdk_state_to_str(appd_iot_sdk_state_t sdk_state) __APPD_IOT_API;

/**
 * @brief Get Server Correlation headers in {key,value} format that need to be added to
 * every outgoing http request to enable capturing Business Transaction (BT).
 * @return Server Correlation Headers. Total number of headers present is given by
 * macro APPD_IOT_NUM_SERVER_CORRELATION_HEADERS. Do not modify or free returned headers.
 */
const appd_iot_data_t* appd_iot_get_server_correlation_headers(void) __APPD_IOT_API;

#ifdef __cplusplus
} /* extern "C" */
#endif  /* defined(__cplusplus) */

#endif /* appd_iot_def_h */
